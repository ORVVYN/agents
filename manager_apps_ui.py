import logging
from typing import List
from telegram import InlineKeyboardButton, InlineKeyboardMarkup, Update
from telegram.ext import ContextTypes

from db.session import get_session
from db import models
from agents.ui_nav import add_nav

logger = logging.getLogger(__name__)

APP_PREFIX = "app:"
ACT_PREFIX = "appact:"


def _application_title(app: models.Application) -> str:
    title = app.search_term or "(–Ω–µ—Ç –ø–æ–∏—Å–∫–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞)"
    status = app.status
    return f"#{app.id} {title} [{status}]"


def list_applications_keyboard(limit: int = 20) -> InlineKeyboardMarkup:
    session = get_session()
    apps: List[models.Application] = (
        session.query(models.Application)
        .order_by(models.Application.created_at.desc())
        .limit(limit)
        .all()
    )
    session.close()
    buttons = [
        [InlineKeyboardButton(_application_title(a)[:60], callback_data=f"{APP_PREFIX}{a.id}")]
        for a in apps
    ]
    add_nav(buttons)
    if not buttons:
        buttons = [[InlineKeyboardButton("–ù–µ—Ç –∑–∞—è–≤–æ–∫", callback_data="noop")]]
    return InlineKeyboardMarkup(buttons)


def app_card(app: models.Application) -> str:
    lines = [f"<b>–ó–∞—è–≤–∫–∞ #{app.id}</b>"]
    if app.search_term:
        lines.append(f"üîé {app.search_term}")
    if app.details:
        lines.append(app.details)
    lines.append(f"–°—Ç–∞—Ç—É—Å: {app.status}")
    if app.supplier:
        lines.append("\n<b>–ü–æ—Å—Ç–∞–≤—â–∏–∫:</b>")
        lines.append(app.supplier.name)
        if app.supplier.phone:
            lines.append(f"üìû {app.supplier.phone}")
        if app.supplier.email:
            lines.append(f"‚úâÔ∏è {app.supplier.email}")
    return "\n".join(lines)


def app_actions_keyboard(app: models.Application) -> InlineKeyboardMarkup:
    buttons = []
    if app.supplier and app.supplier.phone:
        buttons.append([InlineKeyboardButton("–ü–æ–∑–≤–æ–Ω–∏—Ç—å –ø–æ—Å—Ç–∞–≤—â–∏–∫—É", callback_data=ACT_PREFIX + f"call|{app.id}")])
    if app.supplier and app.supplier.email:
        buttons.append([InlineKeyboardButton("–ó–∞–ø—Ä–æ—Å–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç—ã (email)", callback_data=ACT_PREFIX + f"docs|{app.id}")])
    buttons.append([InlineKeyboardButton("–ó–∞–ø—Ä–æ—Å–∏—Ç—å –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ", callback_data=ACT_PREFIX + f"info|{app.id}")])
    if not buttons:
        buttons = [[InlineKeyboardButton("–ù–µ—Ç –¥–µ–π—Å—Ç–≤–∏–π", callback_data="noop")]]
    add_nav(buttons)
    return InlineKeyboardMarkup(buttons)


async def handle_apps_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–°–ø–∏—Å–æ–∫ –∑–∞—è–≤–æ–∫:", reply_markup=list_applications_keyboard())


async def handle_callback_query(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    data = query.data or ""
    if data.startswith(APP_PREFIX):
        app_id = int(data[len(APP_PREFIX):])
        session = get_session()
        app = session.query(models.Application).get(app_id)
        session.close()
        if not app:
            await query.edit_message_text("–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return
        await query.edit_message_text(
            app_card(app), parse_mode="HTML", reply_markup=app_actions_keyboard(app)
        )
    elif data.startswith(ACT_PREFIX):
        action, app_id = data[len(ACT_PREFIX):].split("|", 1)
        app_id = int(app_id)
        session = get_session()
        app = session.query(models.Application).get(app_id)
        session.close()
        if not app:
            await query.edit_message_text("–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return
        from agents import contact_agents
        if action == "call":
            txt = await contact_agents.call_supplier(app.supplier, application=app)
        elif action == "docs":
            txt = await contact_agents.email_supplier(app.supplier, application=app, subject="–ó–∞–ø—Ä–æ—Å –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤", body="–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏—à–ª–∏—Ç–µ –ø–∞–∫–µ—Ç –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –¥–ª—è –¥–æ–≥–æ–≤–æ—Ä–∞")
        elif action == "info":
            txt = await contact_agents.email_supplier(app.supplier, application=app, subject="–£—Ç–æ—á–Ω–µ–Ω–∏–µ –ø–æ –∑–∞—è–≤–∫–µ", body="–ü—Ä–æ—Å—å–±–∞ —É—Ç–æ—á–Ω–∏—Ç—å –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ –ø–æ –ø–æ—Å—Ç–∞–≤–∫–µ")
        else:
            txt = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ."
        await query.edit_message_text(txt)
    else:
        pass
